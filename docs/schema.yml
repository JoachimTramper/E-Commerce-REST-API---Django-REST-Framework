openapi: 3.0.3
info:
  title: ECOMMERCE-API
  version: 1.0.0
  description: 'REST API for managing products, orders, order items, user accounts
    and authentication '
  contact:
    name: Joachim Tramper
    email: joachimtramper@gmail.com
    url: https://github.com/joachimtramper
paths:
  /auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/jwt/verify/:
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /auth/users/:
    get:
      operationId: auth_users_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAppUserList'
          description: ''
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetypeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetypeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetypeRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatePasswordRetype'
          description: ''
  /auth/users/{id}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
    delete:
      operationId: auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/activation/:
    post:
      operationId: auth_users_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActivationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActivationRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_email/:
    post:
      operationId: auth_users_reset_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_email_confirm/:
    post:
      operationId: auth_users_reset_email_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirmRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetypeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetypeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetypeRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirmRetype'
          description: ''
  /auth/users/set_email/:
    post:
      operationId: auth_users_set_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsernameRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsernameRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsernameRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
  /health/:
    get:
      operationId: health_retrieve
      tags:
      - health
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: OK
  /shop/cart/:
    get:
      operationId: shop_cart_list
      description: Retrieve the current user's pending cart
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
              examples:
                GetCartEmpty:
                  value:
                  - items: []
                    total_amount: '0.00'
                  summary: Lege cart response
                GetCartWithItems:
                  value:
                  - order_id: 123e4567-e89b-12d3-a456-426614174000
                    order_number: 7
                    created_at: '2025-05-11T12:34:56.789Z'
                    status: pending
                    items:
                    - id: 1
                      order: 123e4567-e89b-12d3-a456-426614174000
                      product: 1
                      quantity: 2
                      item_subtotal: '20.00'
                    - id: 2
                      order: 123e4567-e89b-12d3-a456-426614174000
                      product: 2
                      quantity: 1
                      item_subtotal: '5.00'
                    total_amount: '25.00'
                  summary: Response van een cart met 2 items
          description: ''
        '404':
          description: No pending cart
  /shop/cart/checkout/:
    post:
      operationId: cartCheckout
      description: 'Reserve stock and sets status to AWAITING_PAYMENT. Returns 200
        + JSON { message: … } if successful.'
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: Stock reserved; you have 10 minutes to complete payment.
        '400':
          description: Not enough stock / concurrency error
        '404':
          description: No pending cart
  /shop/cart/items/:
    get:
      operationId: cartItemsList
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderItemListList'
          description: ''
    post:
      operationId: cartItemCreate
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
            examples:
              AddItemToCart:
                value:
                  product: 1
                  quantity: 2
                summary: 'Voeg 2 stuks van product #1 toe'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
  /shop/cart/items/{id}/:
    get:
      operationId: cartItemsRetrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
          description: ''
    put:
      operationId: cartItemUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
          description: ''
    patch:
      operationId: cartItemPartialUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemCreateUpdateRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
          description: ''
    delete:
      operationId: cartItemDelete
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: Cart item deleted
  /shop/order-items/:
    get:
      operationId: shop_order_items_list
      description: |-
        - Admin users: full CRUD on all order items.
        - Non-staff users:
            • list/retrieve: only items from their own orders.
            • create: only if they have at least one PENDING order.
            • update/partial_update: only on items whose order status == PENDING.
            • delete: only on items whose order status == PENDING.
      parameters:
      - in: query
        name: order
        schema:
          type: string
          format: uuid
      - in: query
        name: order__status
        schema:
          type: string
          enum:
          - AwaitingPayment
          - Cancelled
          - Confirmed
          - Delivered
          - Pending
          - Shipped
        description: |-
          * `Pending` - Pending
          * `AwaitingPayment` - Awaiting Payment
          * `Confirmed` - Confirmed
          * `Shipped` - Shipped
          * `Delivered` - Delivered
          * `Cancelled` - Cancelled
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product
        schema:
          type: number
      - in: query
        name: quantity_max
        schema:
          type: integer
      - in: query
        name: quantity_min
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderItemDetailList'
              examples:
                GetOrder-itemResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 5
                      order: 123e4567-e89b-12d3-a456-426655440000
                      product: 2
                      product_name: Socks
                      quantity: 3
                      item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Retrieve order-item
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderItemDetailList'
              examples:
                GetOrder-itemResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 5
                      order: 123e4567-e89b-12d3-a456-426655440000
                      product: 2
                      product_name: Socks
                      quantity: 3
                      item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Create order-item
        '400':
          description: Validation error
        '404':
          description: Not found
    post:
      operationId: shop_order_items_create
      description: |-
        - Admin users: full CRUD on all order items.
        - Non-staff users:
            • list/retrieve: only items from their own orders.
            • create: only if they have at least one PENDING order.
            • update/partial_update: only on items whose order status == PENDING.
            • delete: only on items whose order status == PENDING.
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
            examples:
              CreateOrderItem:
                value:
                  product: 2
                  quantity: 3
                summary: Payload to add an item to an existing order
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Retrieve order-item
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Create order-item
        '400':
          description: Validation error
        '404':
          description: Not found
  /shop/order-items/{id}/:
    get:
      operationId: shop_order_items_retrieve
      description: |-
        - Admin users: full CRUD on all order items.
        - Non-staff users:
            • list/retrieve: only items from their own orders.
            • create: only if they have at least one PENDING order.
            • update/partial_update: only on items whose order status == PENDING.
            • delete: only on items whose order status == PENDING.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Retrieve order-item
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Create order-item
        '400':
          description: Validation error
        '404':
          description: Not found
    put:
      operationId: shop_order_items_update
      description: |-
        - Admin users: full CRUD on all order items.
        - Non-staff users:
            • list/retrieve: only items from their own orders.
            • create: only if they have at least one PENDING order.
            • update/partial_update: only on items whose order status == PENDING.
            • delete: only on items whose order status == PENDING.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
            examples:
              CreateOrderItem:
                value:
                  product: 2
                  quantity: 3
                summary: Payload to add an item to an existing order
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItemCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Retrieve order-item
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Create order-item
        '400':
          description: Validation error
        '404':
          description: Not found
    patch:
      operationId: shop_order_items_partial_update
      description: |-
        - Admin users: full CRUD on all order items.
        - Non-staff users:
            • list/retrieve: only items from their own orders.
            • create: only if they have at least one PENDING order.
            • update/partial_update: only on items whose order status == PENDING.
            • delete: only on items whose order status == PENDING.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemCreateUpdateRequest'
            examples:
              CreateOrderItem:
                value:
                  product: 2
                  quantity: 3
                summary: Payload to add an item to an existing order
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemCreateUpdateRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Retrieve order-item
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Create order-item
        '400':
          description: Validation error
        '404':
          description: Not found
    delete:
      operationId: shop_order_items_destroy
      description: |-
        - Admin users: full CRUD on all order items.
        - Non-staff users:
            • list/retrieve: only items from their own orders.
            • create: only if they have at least one PENDING order.
            • update/partial_update: only on items whose order status == PENDING.
            • delete: only on items whose order status == PENDING.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order item.
        required: true
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Retrieve order-item
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
              examples:
                GetOrder-itemResponse:
                  value:
                    id: 5
                    order: 123e4567-e89b-12d3-a456-426655440000
                    product: 2
                    product_name: Socks
                    quantity: 3
                    item_subtotal: '15.00'
                  summary: Example response for order-item
          description: Create order-item
        '400':
          description: Validation error
        '404':
          description: Not found
  /shop/orders/:
    get:
      operationId: shop_orders_list
      description: |-
        - Admin users: full CRUD on all orders.
        - Non-staff users:
            • list/retrieve: only their own orders.
            • create: may create orders for themselves.
            • update/partial_update: only on their own orders when status == PENDING.
            • delete: only on their own orders when status == PENDING.
      parameters:
      - in: query
        name: created_after
        schema:
          type: string
          format: date-time
      - in: query
        name: created_before
        schema:
          type: string
          format: date-time
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
      - in: query
        name: total_max
        schema:
          type: number
      - in: query
        name: total_min
        schema:
          type: number
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderDetailList'
              examples:
                GetOrderResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - order_id: 123e4567-e89b-12d3-a456-426655440000
                      status: pending
                      total_amount: '44.98'
                      created_at: '2025-05-10T14:00:00Z'
                      items:
                      - id: 1
                        product_id: 1
                        product_name: T-shirt
                        quantity: 2
                        price: '19.99'
                        item_subtotal: '39.98'
                      - id: 2
                        product_id: 2
                        product_name: Socks
                        quantity: 1
                        price: '5.00'
                        item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Retrieve order
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderCreateList'
              examples:
                GetOrderResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - order_id: 123e4567-e89b-12d3-a456-426655440000
                      status: pending
                      total_amount: '44.98'
                      created_at: '2025-05-10T14:00:00Z'
                      items:
                      - id: 1
                        product_id: 1
                        product_name: T-shirt
                        quantity: 2
                        price: '19.99'
                        item_subtotal: '39.98'
                      - id: 2
                        product_id: 2
                        product_name: Socks
                        quantity: 1
                        price: '5.00'
                        item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Create order
        '400':
          description: Validation error
        '404':
          description: Not found
    post:
      operationId: shop_orders_create
      description: |-
        - Admin users: full CRUD on all orders.
        - Non-staff users:
            • list/retrieve: only their own orders.
            • create: may create orders for themselves.
            • update/partial_update: only on their own orders when status == PENDING.
            • delete: only on their own orders when status == PENDING.
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
            examples:
              CreateOrder:
                value:
                  items:
                  - product_id: 1
                    quantity: 2
                    price: '19.99'
                  - product_id: 2
                    quantity: 1
                    price: '5.00'
                summary: Payload to create a new order
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Retrieve order
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Create order
        '400':
          description: Validation error
        '404':
          description: Not found
  /shop/orders/{order_id}/:
    get:
      operationId: shop_orders_retrieve
      description: |-
        - Admin users: full CRUD on all orders.
        - Non-staff users:
            • list/retrieve: only their own orders.
            • create: may create orders for themselves.
            • update/partial_update: only on their own orders when status == PENDING.
            • delete: only on their own orders when status == PENDING.
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Retrieve order
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Create order
        '400':
          description: Validation error
        '404':
          description: Not found
    put:
      operationId: shop_orders_update
      description: |-
        - Admin users: full CRUD on all orders.
        - Non-staff users:
            • list/retrieve: only their own orders.
            • create: may create orders for themselves.
            • update/partial_update: only on their own orders when status == PENDING.
            • delete: only on their own orders when status == PENDING.
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
            examples:
              CreateOrder:
                value:
                  items:
                  - product_id: 1
                    quantity: 2
                    price: '19.99'
                  - product_id: 2
                    quantity: 1
                    price: '5.00'
                summary: Payload to create a new order
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Retrieve order
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Create order
        '400':
          description: Validation error
        '404':
          description: Not found
    patch:
      operationId: shop_orders_partial_update
      description: |-
        - Admin users: full CRUD on all orders.
        - Non-staff users:
            • list/retrieve: only their own orders.
            • create: may create orders for themselves.
            • update/partial_update: only on their own orders when status == PENDING.
            • delete: only on their own orders when status == PENDING.
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreateRequest'
            examples:
              CreateOrder:
                value:
                  items:
                  - product_id: 1
                    quantity: 2
                    price: '19.99'
                  - product_id: 2
                    quantity: 1
                    price: '5.00'
                summary: Payload to create a new order
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreateRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Retrieve order
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Create order
        '400':
          description: Validation error
        '404':
          description: Not found
    delete:
      operationId: shop_orders_destroy
      description: |-
        - Admin users: full CRUD on all orders.
        - Non-staff users:
            • list/retrieve: only their own orders.
            • create: may create orders for themselves.
            • update/partial_update: only on their own orders when status == PENDING.
            • delete: only on their own orders when status == PENDING.
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Retrieve order
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
              examples:
                GetOrderResponse:
                  value:
                    order_id: 123e4567-e89b-12d3-a456-426655440000
                    status: pending
                    total_amount: '44.98'
                    created_at: '2025-05-10T14:00:00Z'
                    items:
                    - id: 1
                      product_id: 1
                      product_name: T-shirt
                      quantity: 2
                      price: '19.99'
                      item_subtotal: '39.98'
                    - id: 2
                      product_id: 2
                      product_name: Socks
                      quantity: 1
                      price: '5.00'
                      item_subtotal: '5.00'
                  summary: Example response for retrieving an order
          description: Create order
        '400':
          description: Validation error
        '404':
          description: Not found
  /shop/products/:
    get:
      operationId: shop_products_list
      parameters:
      - in: query
        name: in_stock
        schema:
          type: boolean
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: price_max
        schema:
          type: number
      - in: query
        name: price_min
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
              examples:
                GetProductResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 1
                      name: T-shirt
                      price: '19.99'
                      stock: 100
                      description: Soft cotton T-shirt
                      created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Retrieve product
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
              examples:
                GetProductResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 1
                      name: T-shirt
                      price: '19.99'
                      stock: 100
                      description: Soft cotton T-shirt
                      created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Create product
        '400':
          description: Validation error
        '404':
          description: Not found
    post:
      operationId: shop_products_create
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            examples:
              CreateT-shirt:
                value:
                  name: T-shirt
                  price: '19.99'
                  stock: 100
                  description: Soft cotton T-shirt
                summary: Payload to create a new T-shirt
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Retrieve product
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Create product
        '400':
          description: Validation error
        '404':
          description: Not found
  /shop/products/{id}/:
    get:
      operationId: shop_products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Retrieve product
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Create product
        '400':
          description: Validation error
        '404':
          description: Not found
    put:
      operationId: shop_products_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            examples:
              CreateT-shirt:
                value:
                  name: T-shirt
                  price: '19.99'
                  stock: 100
                  description: Soft cotton T-shirt
                summary: Payload to create a new T-shirt
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Retrieve product
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Create product
        '400':
          description: Validation error
        '404':
          description: Not found
    patch:
      operationId: shop_products_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
            examples:
              CreateT-shirt:
                value:
                  name: T-shirt
                  price: '19.99'
                  stock: 100
                  description: Soft cotton T-shirt
                summary: Payload to create a new T-shirt
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Retrieve product
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Create product
        '400':
          description: Validation error
        '404':
          description: Not found
    delete:
      operationId: shop_products_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - shop
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Retrieve product
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GetProductResponse:
                  value:
                    id: 1
                    name: T-shirt
                    price: '19.99'
                    stock: 100
                    description: Soft cotton T-shirt
                    created_at: '2025-05-01T12:34:56Z'
                  summary: Example response body
          description: Create product
        '400':
          description: Validation error
        '404':
          description: Not found
  /token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /users/2fa/:
    delete:
      operationId: 2fa_disable
      description: Disable all TOTP devices for the user
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /users/2fa/setup/:
    get:
      operationId: 2fa_setup
      description: Generate a new TOTP device and return QR code + secret
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /users/2fa/verify/:
    post:
      operationId: 2fa_verify
      description: Verify the TOTP code and confirm the device
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /users/addresses/:
    get:
      operationId: users_addresses_list
      parameters:
      - in: query
        name: city
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: zipcode
        schema:
          type: string
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressList'
              examples:
                AddressResponse:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: 1
                      label: Home
                      street: Main St
                      number: '123'
                      zipcode: '12345'
                      city: Amsterdam
                      country: NL
                      is_billing: true
                      is_shipping: false
                  summary: Address response
          description: ''
    post:
      operationId: users_addresses_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
            examples:
              CreateAddress:
                value:
                  label: Home
                  street: Main St
                  number: '123'
                  zipcode: '12345'
                  city: Amsterdam
                  country: NL
                  is_billing: true
                  is_shipping: false
                summary: Create address
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddressRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                AddressResponse:
                  value:
                    id: 1
                    label: Home
                    street: Main St
                    number: '123'
                    zipcode: '12345'
                    city: Amsterdam
                    country: NL
                    is_billing: true
                    is_shipping: false
                  summary: Address response
          description: ''
  /users/addresses/{id}/:
    get:
      operationId: users_addresses_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Address.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                AddressResponse:
                  value:
                    id: 1
                    label: Home
                    street: Main St
                    number: '123'
                    zipcode: '12345'
                    city: Amsterdam
                    country: NL
                    is_billing: true
                    is_shipping: false
                  summary: Address response
          description: ''
    put:
      operationId: users_addresses_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Address.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
            examples:
              CreateAddress:
                value:
                  label: Home
                  street: Main St
                  number: '123'
                  zipcode: '12345'
                  city: Amsterdam
                  country: NL
                  is_billing: true
                  is_shipping: false
                summary: Create address
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddressRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                AddressResponse:
                  value:
                    id: 1
                    label: Home
                    street: Main St
                    number: '123'
                    zipcode: '12345'
                    city: Amsterdam
                    country: NL
                    is_billing: true
                    is_shipping: false
                  summary: Address response
          description: ''
    patch:
      operationId: users_addresses_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Address.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
            examples:
              CreateAddress:
                value:
                  label: Home
                  street: Main St
                  number: '123'
                  zipcode: '12345'
                  city: Amsterdam
                  country: NL
                  is_billing: true
                  is_shipping: false
                summary: Create address
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                AddressResponse:
                  value:
                    id: 1
                    label: Home
                    street: Main St
                    number: '123'
                    zipcode: '12345'
                    city: Amsterdam
                    country: NL
                    is_billing: true
                    is_shipping: false
                  summary: Address response
          description: ''
    delete:
      operationId: users_addresses_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Address.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /users/auth/jwt/create/:
    post:
      operationId: login
      description: Login with email+password, returns JWT + has_2fa flag
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /users/me/:
    get:
      operationId: users_me_retrieve
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
    put:
      operationId: users_me_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AppUserRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
    patch:
      operationId: users_me_partial_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAppUserRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: ''
  /users/me/addresses/:
    get:
      operationId: users_me_addresses_list
      parameters:
      - in: query
        name: city
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
      - in: query
        name: is_billing
        schema:
          type: boolean
      - in: query
        name: is_shipping
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressList'
          description: ''
    post:
      operationId: users_me_addresses_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddressRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
  /users/me/addresses/{id}/:
    get:
      operationId: users_me_addresses_retrieve
      description: Authenticated user to GET, PATCH or DELETE their own address.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    put:
      operationId: users_me_addresses_update
      description: Authenticated user to GET, PATCH or DELETE their own address.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddressRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    patch:
      operationId: users_me_addresses_partial_update
      description: Authenticated user to GET, PATCH or DELETE their own address.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    delete:
      operationId: users_me_addresses_destroy
      description: Authenticated user to GET, PATCH or DELETE their own address.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /users/me/delete/:
    delete:
      operationId: users_me_delete_destroy
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /users/me/profile/:
    get:
      operationId: users_me_profile_retrieve
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: users_me_profile_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: users_me_profile_partial_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /users/profiles/:
    get:
      operationId: users_profiles_list
      parameters:
      - in: query
        name: date_of_birth
        schema:
          type: string
          format: date
      - in: query
        name: date_of_birth__gte
        schema:
          type: string
          format: date
      - in: query
        name: date_of_birth__lte
        schema:
          type: string
          format: date
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: phone_number__icontains
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAdminProfileList'
          description: ''
    post:
      operationId: users_profiles_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminProfileRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'
          description: ''
  /users/profiles/{id}/:
    get:
      operationId: users_profiles_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this customer profile.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'
          description: ''
    put:
      operationId: users_profiles_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this customer profile.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminProfileRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'
          description: ''
    patch:
      operationId: users_profiles_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this customer profile.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAdminProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAdminProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAdminProfileRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'
          description: ''
    delete:
      operationId: users_profiles_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this customer profile.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /users/users/:
    get:
      operationId: users_users_list
      parameters:
      - in: query
        name: date_joined
        schema:
          type: string
          format: date-time
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter on active users (true/false)
      - in: query
        name: is_staff
        schema:
          type: boolean
        description: Filter on staff users (true/false)
      - in: query
        name: ordering
        schema:
          type: string
        description: Sort by date_joined or email; prefix "-" for descending
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Partial search on email or username
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAdminUserList'
          description: ''
    post:
      operationId: users_users_create
      parameters:
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter on active users (true/false)
      - in: query
        name: is_staff
        schema:
          type: boolean
        description: Filter on staff users (true/false)
      - in: query
        name: ordering
        schema:
          type: string
        description: Sort by date_joined or email; prefix "-" for descending
      - in: query
        name: search
        schema:
          type: string
        description: Partial search on email or username
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminUserRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
          description: ''
  /users/users/{id}/:
    get:
      operationId: users_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter on active users (true/false)
      - in: query
        name: is_staff
        schema:
          type: boolean
        description: Filter on staff users (true/false)
      - in: query
        name: ordering
        schema:
          type: string
        description: Sort by date_joined or email; prefix "-" for descending
      - in: query
        name: search
        schema:
          type: string
        description: Partial search on email or username
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
          description: ''
    put:
      operationId: users_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter on active users (true/false)
      - in: query
        name: is_staff
        schema:
          type: boolean
        description: Filter on staff users (true/false)
      - in: query
        name: ordering
        schema:
          type: string
        description: Sort by date_joined or email; prefix "-" for descending
      - in: query
        name: search
        schema:
          type: string
        description: Partial search on email or username
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminUserRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
          description: ''
    patch:
      operationId: users_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter on active users (true/false)
      - in: query
        name: is_staff
        schema:
          type: boolean
        description: Filter on staff users (true/false)
      - in: query
        name: ordering
        schema:
          type: string
        description: Sort by date_joined or email; prefix "-" for descending
      - in: query
        name: search
        schema:
          type: string
        description: Partial search on email or username
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAdminUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAdminUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAdminUserRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
          description: ''
    delete:
      operationId: users_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter on active users (true/false)
      - in: query
        name: is_staff
        schema:
          type: boolean
        description: Filter on staff users (true/false)
      - in: query
        name: ordering
        schema:
          type: string
        description: Sort by date_joined or email; prefix "-" for descending
      - in: query
        name: search
        schema:
          type: string
        description: Partial search on email or username
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /webhooks/payment/:
    post:
      operationId: paymentWebhook
      description: |-
        Payment provider callback endpoint:
        - Verify header `X-Webhook-Key` matches the configured secret.
        - Expect JSON body with `order_id` (UUID) and `status` ('paid' or 'failed').
        - If `status == 'paid'` and order is in `AWAITING_PAYMENT`, then:
          1) Decrement `stock` and `stock_reserved` for each OrderItem within     an atomic transaction.
          2) Change order status to `CONFIRMED` and save.
          3) Dispatch Celery task `send_order_email_with_invoice.delay(order_id)`.
        - Always return 200 OK with a JSON confirmation message   `{ 'message': 'Webhook received' }`.
      parameters:
      - in: header
        name: X-Webhook-Key
        schema:
          type: string
        description: Secret key required to authenticate the webhook request
        required: true
      tags:
      - webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhookRequest'
            examples:
              PaymentWebhookRequest:
                value:
                  order_id: 327a8ead-4e5f-4815-a6ed-0ff3ba4d335b
                  status: paid
                summary: Example payload for payment_webhook
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentWebhookRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentWebhookRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: Webhook received; if status='paid' and order was AWAITING_PAYMENT,
            stock is decremented, order set to CONFIRMED, and invoice email triggered.
        '400':
          description: Missing data or insufficient stock
        '403':
          description: Unauthorized (invalid X-Webhook-Key)
        '404':
          description: Order not found
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    ActivationRequest:
      type: object
      properties:
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - token
      - uid
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        label:
          type: string
          description: e.g. 'Home', 'Work'
          maxLength: 30
        street:
          type: string
          maxLength: 100
        number:
          type: string
          maxLength: 10
        zipcode:
          type: string
          minLength: 3
        city:
          type: string
          maxLength: 50
        country:
          type: string
          maxLength: 50
        is_billing:
          type: boolean
        is_shipping:
          type: boolean
      required:
      - city
      - country
      - id
      - label
      - number
      - street
      - zipcode
    AddressRequest:
      type: object
      properties:
        label:
          type: string
          minLength: 1
          description: e.g. 'Home', 'Work'
          maxLength: 30
        street:
          type: string
          minLength: 1
          maxLength: 100
        number:
          type: string
          minLength: 1
          maxLength: 10
        zipcode:
          type: string
          minLength: 3
        city:
          type: string
          minLength: 1
          maxLength: 50
        country:
          type: string
          minLength: 1
          maxLength: 50
        is_billing:
          type: boolean
        is_shipping:
          type: boolean
      required:
      - city
      - country
      - label
      - number
      - street
      - zipcode
    AdminProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        phone_number:
          type: string
          maxLength: 30
        date_of_birth:
          type: string
          format: date
          nullable: true
      required:
      - id
      - user
    AdminProfileRequest:
      type: object
      properties:
        user:
          type: integer
        phone_number:
          type: string
          maxLength: 30
        date_of_birth:
          type: string
          format: date
          nullable: true
      required:
      - user
    AdminUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - email
      - id
      - username
    AdminUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - email
      - username
    AppUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
        username:
          type: string
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
      required:
      - id
      - profile
    AppUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        username:
          type: string
          minLength: 1
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Cart:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDetail'
          readOnly: true
        total_amount:
          type: number
          format: double
          readOnly: true
      required:
      - created_at
      - items
      - order_id
      - total_amount
    OrderCreate:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: '#/components/schemas/Status93bEnum'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDetail'
      required:
      - items
      - order_id
    OrderCreateRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status93bEnum'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDetailRequest'
      required:
      - items
    OrderDetail:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
          readOnly: true
        order_number:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status93bEnum'
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDetail'
        total_amount:
          type: number
          format: double
          readOnly: true
      required:
      - created_at
      - items
      - order_id
      - order_number
      - status
      - total_amount
    OrderItemCreateUpdateRequest:
      type: object
      properties:
        product:
          type: integer
        quantity:
          type: integer
      required:
      - product
      - quantity
    OrderItemDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        order:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        quantity:
          type: integer
        item_subtotal:
          type: number
          format: double
          readOnly: true
      required:
      - id
      - item_subtotal
      - order
      - product
      - quantity
    OrderItemDetailRequest:
      type: object
      properties:
        product_id:
          type: integer
          writeOnly: true
        quantity:
          type: integer
      required:
      - product_id
      - quantity
    OrderItemList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        order:
          type: string
          format: uuid
          readOnly: true
        product:
          type: integer
          readOnly: true
        product_name:
          type: string
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        item_subtotal:
          type: number
          format: double
          readOnly: true
      required:
      - id
      - item_subtotal
      - order
      - price
      - product
      - product_name
      - quantity
    PaginatedAddressList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    PaginatedAdminProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AdminProfile'
    PaginatedAdminUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AdminUser'
    PaginatedAppUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AppUser'
    PaginatedOrderCreateList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderCreate'
    PaginatedOrderDetailList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderDetail'
    PaginatedOrderItemDetailList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDetail'
    PaginatedOrderItemListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemList'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PasswordResetConfirmRetype:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
        re_new_password:
          type: string
      required:
      - new_password
      - re_new_password
      - token
      - uid
    PasswordResetConfirmRetypeRequest:
      type: object
      properties:
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 1
        re_new_password:
          type: string
          minLength: 1
      required:
      - new_password
      - re_new_password
      - token
      - uid
    PatchedAddressRequest:
      type: object
      properties:
        label:
          type: string
          minLength: 1
          description: e.g. 'Home', 'Work'
          maxLength: 30
        street:
          type: string
          minLength: 1
          maxLength: 100
        number:
          type: string
          minLength: 1
          maxLength: 10
        zipcode:
          type: string
          minLength: 3
        city:
          type: string
          minLength: 1
          maxLength: 50
        country:
          type: string
          minLength: 1
          maxLength: 50
        is_billing:
          type: boolean
        is_shipping:
          type: boolean
    PatchedAdminProfileRequest:
      type: object
      properties:
        user:
          type: integer
        phone_number:
          type: string
          maxLength: 30
        date_of_birth:
          type: string
          format: date
          nullable: true
    PatchedAdminUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
    PatchedAppUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        username:
          type: string
          minLength: 1
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    PatchedOrderCreateRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status93bEnum'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDetailRequest'
    PatchedOrderItemCreateUpdateRequest:
      type: object
      properties:
        product:
          type: integer
        quantity:
          type: integer
    PatchedProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        image:
          type: string
          format: binary
          nullable: true
    PatchedUserProfileRequest:
      type: object
      properties:
        phone_number:
          type: string
          pattern: ^\d+$
        date_of_birth:
          type: string
          format: date
          nullable: true
    PaymentWebhookRequest:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
          description: UUID of paid order
        status:
          allOf:
          - $ref: '#/components/schemas/PaymentWebhookStatusEnum'
          description: |-
            Payment status: 'paid' or 'failed'

            * `paid` - paid
            * `failed` - failed
      required:
      - order_id
      - status
    PaymentWebhookStatusEnum:
      enum:
      - paid
      - failed
      type: string
      description: |-
        * `paid` - paid
        * `failed` - failed
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        in_stock:
          type: boolean
          readOnly: true
        image:
          type: string
          format: uri
          nullable: true
      required:
      - description
      - id
      - in_stock
      - name
      - price
      - stock
    ProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        image:
          type: string
          format: binary
          nullable: true
      required:
      - description
      - name
      - price
      - stock
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SendEmailResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetPasswordRequest:
      type: object
      properties:
        new_password:
          type: string
          minLength: 1
        current_password:
          type: string
          minLength: 1
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 254
      required:
      - current_password
      - new_email
    SetUsernameRequest:
      type: object
      properties:
        current_password:
          type: string
          minLength: 1
        new_email:
          type: string
          format: email
          minLength: 1
          title: Email
          maxLength: 254
      required:
      - current_password
      - new_email
    Status93bEnum:
      enum:
      - Pending
      - AwaitingPayment
      - Confirmed
      - Shipped
      - Delivered
      - Cancelled
      type: string
      description: |-
        * `Pending` - Pending
        * `AwaitingPayment` - Awaiting Payment
        * `Confirmed` - Confirmed
        * `Shipped` - Shipped
        * `Delivered` - Delivered
        * `Cancelled` - Cancelled
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    UserCreatePasswordRetype:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        id:
          type: integer
          readOnly: true
        re_password:
          type: string
      required:
      - email
      - id
      - re_password
      - username
    UserCreatePasswordRetypeRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 1
        re_password:
          type: string
          minLength: 1
      required:
      - email
      - password
      - re_password
      - username
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        phone_number:
          type: string
          pattern: ^\d+$
        date_of_birth:
          type: string
          format: date
          nullable: true
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          readOnly: true
      required:
      - addresses
      - id
    UserProfileRequest:
      type: object
      properties:
        phone_number:
          type: string
          pattern: ^\d+$
        date_of_birth:
          type: string
          format: date
          nullable: true
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 254
      required:
      - new_email
    UsernameResetConfirmRequest:
      type: object
      properties:
        new_email:
          type: string
          format: email
          minLength: 1
          title: Email
          maxLength: 254
      required:
      - new_email
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: https://web-production-7c555.up.railway.app/api
  description: Production API on Railway
- url: /api
  description: API base path
